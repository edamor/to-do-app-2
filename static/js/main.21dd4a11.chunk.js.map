{"version":3,"sources":["imgs/play.png","imgs/check.png","imgs/undo.png","imgs/garbage.png","imgs/confirm.png","imgs/cancel.png","imgs/add.png","components/ActionButton.js","components/Task.js","components/Container.js","routes/Child.js","components/Nav.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ActionButton","props","handleStart","start","task","id","handleFinish","finish","handleUndo","undo","Fragment","status","className","onClick","src","playBtn","alt","checkBtn","undoBtn","delete","deleteBtn","Task","inputRef","useRef","toggle","toggleInput","useState","taskName","newTaskName","setNewTaskName","handleChange","e","target","value","handleCancel","handleConfirm","edit","onEdit","type","ref","onChange","placeholder","autoFocus","confirmBtn","cancelBtn","onDoubleClick","onTouchEnd","Container","pathname","useLocation","header","setHeader","uuid","tasks","setTasks","editTask","taskID","newName","editedTask","map","item","editInputToggle","showInput","doTask","ongoingTask","finishTask","finishedTask","undoTask","undoneTask","deleteTask","deletedTask","containerRef","titleRef","useEffect","addBtn","window","scrollTo","top","left","behavior","newTask","filter","key","Child","Nav","to","exact","activeClassName","App","basename","process","path","children","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.21dd4a11.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/play.bf604bf3.png\";","module.exports = __webpack_public_path__ + \"static/media/check.d1826015.png\";","module.exports = __webpack_public_path__ + \"static/media/undo.2148f380.png\";","module.exports = __webpack_public_path__ + \"static/media/garbage.2108b72f.png\";","module.exports = __webpack_public_path__ + \"static/media/confirm.38dd1442.png\";","module.exports = __webpack_public_path__ + \"static/media/cancel.a641a952.png\";","module.exports = __webpack_public_path__ + \"static/media/add.623d3aa3.png\";","import React from 'react';\r\nimport playBtn from '../imgs/play.png';\r\nimport checkBtn from '../imgs/check.png';\r\nimport undoBtn from '../imgs/undo.png';\r\nimport deleteBtn from '../imgs/garbage.png';\r\n\r\n\r\nfunction ActionButton(props) {\r\n\r\n   function handleStart() {\r\n      props.start(props.task.id)\r\n   }\r\n\r\n   function handleFinish() {\r\n      props.finish(props.task.id)\r\n   }\r\n\r\n   function handleUndo() {\r\n      props.undo(props.task.id)\r\n   }\r\n\r\n   function handleDelete() {\r\n      props.delete(props.task.id)\r\n   }\r\n   \r\n   let actionButtons = () => {\r\n      if (props.task.status === \"New\") {\r\n         return (\r\n            <div className=\"action-button\" onClick={handleStart} >\r\n               <img src={playBtn} alt=\"play button\" className=\"action-button-img\" />\r\n            </div>\r\n         )\r\n      } else if (props.task.status === \"Ongoing\") {\r\n         return (\r\n            <div className=\"action-button\" onClick={handleFinish}>\r\n               <img src={checkBtn} alt=\"check button\" className=\"action-button-img\" />\r\n            </div>\r\n         )\r\n      } else return (\r\n         <div className=\"action-button\" onClick={handleUndo}>\r\n            <img src={undoBtn} alt=\"undo button\" className=\"action-button-img\" />\r\n         </div>\r\n      )\r\n   };\r\n\r\n   return (\r\n      <React.Fragment>\r\n         {actionButtons()}\r\n         <div className=\"delete-button\" onClick={handleDelete}>\r\n            <img src={deleteBtn} alt=\"delete button\" className=\"delete-button-img\" />\r\n         </div>\r\n      </React.Fragment>\r\n   )\r\n}\r\n\r\n\r\nexport default ActionButton;","import React, { useState, useRef } from 'react';\r\nimport ActionButton from './ActionButton';\r\nimport confirmBtn from '../imgs/confirm.png';\r\nimport cancelBtn from '../imgs/cancel.png';\r\n\r\n\r\nfunction Task(props) {\r\n\r\n   let inputRef = useRef(null);\r\n   \r\n   let toggle = () => {\r\n      props.toggleInput(props.task.id);\r\n   }\r\n\r\n   let [newTaskName, setNewTaskName] = useState(props.task.taskName);\r\n   let handleChange = (e) => {\r\n      setNewTaskName(e.target.value)\r\n   }\r\n   \r\n   let handleCancel = () => {\r\n      setNewTaskName(props.task.taskName)\r\n      props.toggleInput(props.task.id);\r\n   }\r\n\r\n   let handleConfirm = () => {\r\n      props.edit(props.task.id, newTaskName);\r\n      props.toggleInput(props.task.id);\r\n   }\r\n\r\n   let showTaskTitle = () => {\r\n      if (!props.task.onEdit) {\r\n         return (\r\n            <div className=\"task-title\" onDoubleClick={toggle} onTouchEnd={toggle} >\r\n               <p className=\"task-title-text\" > {props.task.taskName} </p>\r\n            </div>\r\n         )\r\n      } else return (\r\n         <div className=\"task-title\">\r\n            <input \r\n               type=\"text\" \r\n               className=\"task-title-input\" \r\n               ref={inputRef} \r\n               onChange={handleChange} \r\n               value={newTaskName}\r\n               placeholder=\"Type task here...\" \r\n               autoFocus \r\n            />\r\n            <div className=\"edit-button-wrap\">\r\n               <img src={confirmBtn} alt=\"confirm button\" className=\"edit-button-img\" onClick={handleConfirm} />\r\n               <img src={cancelBtn} alt=\"confirm button\" className=\"edit-button-img\" onClick={handleCancel} />\r\n            </div>\r\n         </div>\r\n      )\r\n   }\r\n\r\n   return (\r\n      <div className=\"task-card-container\">\r\n         {showTaskTitle()}\r\n         <div className=\"task-status text-center\">\r\n            <ActionButton task={props.task} start={props.start} finish={props.finish} undo={props.undo} delete={props.delete} />\r\n         </div>\r\n      </div>\r\n   )\r\n}\r\n\r\n\r\nexport default Task;","import React, { useState, useEffect, useRef } from 'react';\r\nimport { useLocation } from 'react-router-dom';\r\nimport Task from './Task';\r\nimport uuid from 'uuid/v4';\r\nimport addBtn from '../imgs/add.png';\r\n\r\n\r\nfunction Container() {\r\n\r\n   let { pathname } = useLocation();\r\n\r\n   let [header, setHeader] = useState(\"My Tasks\");\r\n   \r\n\r\n   let [tasks, setTasks] = useState([\r\n      { id: uuid(), taskName: \"Double-click or tap here to edit\", status: \"New\", onEdit: false }\r\n   ]);\r\n\r\n\r\n   let addTask = () => {\r\n      window.scrollTo({top: 0, left: 0, behavior: \"smooth\"});\r\n      let newTask = { id: uuid(), taskName: \"\", status: \"New\", onEdit: true};\r\n      setTasks([newTask, ...tasks])\r\n   }\r\n\r\n   let editTask = (taskID, newName) => {\r\n      let editedTask = tasks.map((item) => {\r\n         if (taskID === item.id) {\r\n            item.taskName = newName;\r\n            return item;\r\n         } return item;\r\n      })\r\n      setTasks(editedTask);\r\n   }\r\n\r\n   let editInputToggle = (taskID) => {\r\n      let showInput = tasks.map((item) => {\r\n         if (taskID === item.id) {\r\n            if (!item.onEdit) {\r\n               item.onEdit = true;\r\n               return item;\r\n            } else {\r\n               item.onEdit = false;\r\n               return item;\r\n            }\r\n         }\r\n         return item;\r\n      })\r\n      setTasks(showInput);\r\n   }\r\n\r\n   let doTask = (taskID) => {\r\n      let ongoingTask = tasks.map((item) => {\r\n         if (taskID === item.id) {\r\n            item.status = \"Ongoing\";\r\n            return item;\r\n         } else return item;\r\n      })\r\n      setTasks(ongoingTask);\r\n   }\r\n\r\n   let finishTask = (taskID) => {\r\n      let finishedTask = tasks.map((item) => {\r\n         if (taskID === item.id) {\r\n            item.status = \"Finished\";\r\n            return item;\r\n         } else return item;\r\n      })\r\n      setTasks(finishedTask);\r\n   }\r\n\r\n   let undoTask = (taskID) => {\r\n      let undoneTask = tasks.map((item) => {\r\n         if (taskID === item.id) {\r\n            item.status = \"Ongoing\";\r\n            return item;\r\n         } else return item;\r\n      })\r\n      setTasks(undoneTask);\r\n   };\r\n\r\n   let deleteTask = (taskID) => {\r\n      let deletedTask = tasks.map((item) => {\r\n         if (taskID === item.id) {\r\n            item.status = \"Deleted\";\r\n            return item;\r\n         } else return item;\r\n      })\r\n      setTasks(deletedTask);\r\n   };\r\n\r\n\r\n   function showTasks() { \r\n      if (pathname === \"/new\") {\r\n         return tasks.filter(item => item.status === \"New\").map((item) => {\r\n            return (\r\n               <Task\r\n                  key={item.id}\r\n                  task={item}\r\n                  start={doTask}\r\n                  finish={finishTask}\r\n                  undo={undoTask}\r\n                  delete={deleteTask}\r\n                  edit={editTask}\r\n                  toggleInput={editInputToggle}\r\n               />\r\n            )\r\n         });\r\n      } else if (pathname === \"/ongoing\") {\r\n         return tasks.filter(item => item.status === \"Ongoing\").map((item) => {\r\n            return (\r\n               <Task\r\n                  key={item.id}\r\n                  task={item}\r\n                  start={doTask}\r\n                  finish={finishTask}\r\n                  undo={undoTask}\r\n                  delete={deleteTask}\r\n                  edit={editTask}\r\n                  toggleInput={editInputToggle}\r\n               />\r\n            )\r\n         });\r\n      } else if (pathname === \"/finished\") {\r\n         return tasks.filter(item => item.status === \"Finished\").map((item) => {\r\n            return (\r\n               <Task\r\n                  key={item.id}\r\n                  task={item}\r\n                  start={doTask}\r\n                  finish={finishTask}\r\n                  undo={undoTask}\r\n                  delete={deleteTask}\r\n                  edit={editTask}\r\n                  toggleInput={editInputToggle}\r\n               />\r\n            )\r\n         });\r\n      } else return tasks.filter(item => item.status !== \"Deleted\").map((item) => {\r\n               return (\r\n                  <Task\r\n                     key={item.id}\r\n                     task={item}\r\n                     start={doTask}\r\n                     finish={finishTask}\r\n                     undo={undoTask}\r\n                     delete={deleteTask}\r\n                     edit={editTask}\r\n                     toggleInput={editInputToggle}\r\n                  />\r\n               )\r\n            });\r\n   }\r\n\r\n   let handlePage = () => {\r\n      let p = pathname;\r\n      if (p === \"/new\") {\r\n         setHeader(\"New\");\r\n      } else if (p === \"/ongoing\") {\r\n         setHeader(\"Ongoing\");\r\n      } else if (p === \"/finished\") {\r\n         setHeader(\"Finished\");\r\n      } else {\r\n         setHeader(\"My Tasks\");\r\n      }\r\n   }\r\n\r\n   let containerRef = useRef(null);\r\n   let titleRef = useRef(null);\r\n\r\n   useEffect(() => {\r\n      handlePage();\r\n   });\r\n   \r\n\r\n\r\n   return (\r\n      <div className=\"container\">\r\n         <p className=\"h4 text-center\" ref={titleRef}> {header} </p>\r\n         <div className=\"add-button\" >\r\n            <img src={addBtn} alt=\"add button\" className=\"add-button-img\" onClick={addTask} />\r\n         </div>\r\n         <div className=\" default\" ref={containerRef}>\r\n            <div className=\"header-container\">\r\n               <div className=\"header-title\">\r\n                  <p className=\"h6 header-title-text\">\r\n                     Title\r\n                  </p>\r\n               </div>\r\n               <div className=\"header-actions text-center\"> \r\n                  <p className=\"h6 header-action-text\">\r\n                     Actions\r\n                  </p>\r\n               </div>\r\n            </div>\r\n            <div className=\"\" >\r\n               {showTasks()}\r\n            </div>\r\n         </div>\r\n      </div>\r\n   )\r\n}\r\n\r\n\r\nexport default Container;","import React from 'react';\r\nimport Container from '../components/Container';\r\n\r\n\r\nfunction Child() {\r\n\r\n   return (\r\n      <React.Fragment>\r\n\r\n         <Container />\r\n         \r\n      </React.Fragment>\r\n   )\r\n}\r\n\r\n\r\nexport default Child;","import React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\n\r\nfunction Nav() {\r\n   \r\n\r\n   return (\r\n      <div className=\"nav-container\" >\r\n         <ul className=\"text-center nav-menu\" >\r\n            <li>\r\n               <NavLink to=\"/\"\r\n                  exact\r\n                  activeClassName=\"nav-active\"\r\n                  className=\"nav-item\"\r\n               >\r\n                  Tasks\r\n            </NavLink>\r\n            </li>\r\n            <li>\r\n               <NavLink to=\"/new\"\r\n                  activeClassName=\"nav-active\"\r\n                  className=\"nav-item\"\r\n               >\r\n                  New\r\n            </NavLink>\r\n            </li>\r\n            <li>\r\n               <NavLink to=\"/ongoing\"\r\n                  activeClassName=\"nav-active\"\r\n                  className=\"nav-item\"\r\n               >\r\n                  Ongoing\r\n            </NavLink>\r\n            </li>\r\n            <li>\r\n               <NavLink to=\"/finished\"\r\n                  activeClassName=\"nav-active\"\r\n                  className=\"nav-item\"\r\n               >\r\n                  Finished\r\n            </NavLink>\r\n            </li>\r\n         </ul>\r\n      </div>\r\n   )\r\n}\r\n\r\n\r\nexport default Nav;","import React from 'react';\nimport { \n  BrowserRouter, \n  Route, \n  Switch } from 'react-router-dom';\nimport Child from './routes/Child';\nimport Nav from './components/Nav';\n\n\n\nfunction App() {\n  return (\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n      <div className=\"App\">\n\n        <Nav />\n\n        <Switch>\n          <Route exact path=\"/\" children={<Child />} />\n          <Route path=\"/:page\" children={<Child/>} />\n        </Switch>\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}